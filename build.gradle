plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/ultracraft.accesswidener")
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${modid}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://cursemaven.com" }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url 'https://maven.ladysnake.org/releases'}
}

configurations {
    shade
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Geckolib
    modImplementation 'software.bernie.geckolib:geckolib-fabric-1.20.1:4.2.1'

    //Fabric-ASM
    modImplementation(include "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}")

    //Cloth Config
    modApi(include "me.shedaniel.cloth:cloth-config-fabric:11.0.99")

    //ModMenu
    modApi "com.terraformersmc:modmenu:7.1.0"

    //Dynamic Lighting
    modCompileOnlyApi("curse.maven:lambdynamiclights-393442:4597897")

    //REI
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"

    //Player Animator
    include modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.playeranim_version}")

    //better combat
    modImplementation "maven.modrinth:better-combat:${project.bettercombat_version}-fabric"

    //cadinal components
    include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}")
    include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}")
    include modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cardinal_components_version}")

    //GOOP
    modImplementation(include 'com.github.absolutelyaya:goop:fabric-1.20.1-v0.2')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
